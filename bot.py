import asyncio
import random
import html
import json
import os
from datetime import datetime, timedelta
from typing import Dict
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.exceptions import TelegramForbiddenError

# === –ë–æ—Ç –¢–û–ö–ï–ù ===
BOT_TOKEN = "8429191232:AAFxAJUgKNHMP_YdPfHOaQykux0GwBiUwE4"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------- Persistence files ----------
USERS_FILE = "users.json"        # –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è mapping user_id -> anon_id
BANNED_FILE = "banned_users.txt" # —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö

# ---------- –í –ø–∞–º—è—Ç–∏ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤) ----------
user_data: Dict[int, str] = {}  # user_id -> anon_id
user_last_message = {}          # user_id -> (last_text, last_time, last_send_time)
banned_users = set()

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (Telegram ID)
ADMINS = {272883423}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MAX_MESSAGE_LENGTH = 250
MAX_MEDIA_SIZE_MB = 20
SPAM_INTERVAL = timedelta(minutes=10)
SEND_INTERVAL = timedelta(seconds=3)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π

# ----------------- Helpers: load/save users -----------------
def load_users() -> Dict[int, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç users.json, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict user_id->anon_id (–∫–ª—é—á–∏ int)."""
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –ø—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ int (–≤ —Ñ–∞–π–ª–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏)
        return {int(k): v for k, v in data.items()}
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json:", e)
        return {}

def save_users(users: Dict[int, str]):
    """–ê—Ç–æ–º–∞—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç users –≤ USERS_FILE."""
    tmp = USERS_FILE + ".tmp"
    try:
        with open(tmp, "w", encoding="utf-8") as f:
            # –∫–ª—é—á–∏ –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏
            json.dump({str(k): v for k, v in users.items()}, f, ensure_ascii=False, indent=2)
        os.replace(tmp, USERS_FILE)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ users.json:", e)

# ----------------- –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω-–ª–∏—Å—Ç –∏ users –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ -----------------
try:
    with open(BANNED_FILE, "r", encoding="utf-8") as f:
        banned_users = set(int(line.strip()) for line in f if line.strip().isdigit())
except FileNotFoundError:
    banned_users = set()
except Exception as e:
    print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ banned_users.txt:", e)
    banned_users = set()

# –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (user_data)
user_data = load_users()

# ----------------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ -----------------
def get_anon_id(user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π anon_id –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç users.json.
    """
    if user_id in user_data:
        return user_data[user_id]
    anon_id = "ID" + str(random.randint(1000000000, 9999999999))
    user_data[user_id] = anon_id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
    try:
        save_users(user_data)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ users.json –≤ get_anon_id:", e)
    return anon_id

def is_spam(user_id: int, text: str) -> bool:
    now = datetime.now()
    last = user_last_message.get(user_id)
    if last:
        last_text, last_time, _ = last
        if text == last_text and now - last_time < SPAM_INTERVAL:
            return True
    return False

def can_send(user_id: int) -> bool:
    now = datetime.now()
    last = user_last_message.get(user_id)
    if last:
        _, _, last_send_time = last
        if last_send_time and now - last_send_time < SEND_INTERVAL:
            return False
    return True

def sanitize_text(text: str) -> str:
    if not text:
        return ""
    return html.escape(text.strip())

def ban_user(user_id: int):
    banned_users.add(user_id)
    try:
        with open(BANNED_FILE, "a", encoding="utf-8") as f:
            f.write(f"{user_id}\n")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ banned_users.txt:", e)
    print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")

def unban_user(user_id: int):
    banned_users.discard(user_id)
    try:
        with open(BANNED_FILE, "w", encoding="utf-8") as f:
            for uid in banned_users:
                f.write(f"{uid}\n")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ banned_users.txt:", e)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!")

# ----------------- Handlers -----------------
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    if user_id in banned_users:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–∞—Ç–µ.")
        return
    anon_id = get_anon_id(user_id)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ.\n"
        f"–¢–≤–æ–π –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π ID:\n<code>[{anon_id}]</code>\n\n"
        f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞ ‚Äî –∏ –µ–≥–æ —É–≤–∏–¥—è—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏."
    )

@dp.message()
async def msg_handler(message: Message):
    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º group / channel —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type != "private":
        return

    user_id = message.from_user.id
    if user_id in banned_users:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    anon_id = user_data.get(user_id)
    if not anon_id:
        anon_id = get_anon_id(user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        text = sanitize_text(message.text)
        display_text = text
    elif message.caption:
        text = sanitize_text(message.caption)
        display_text = f"<caption>{text}</caption>"
    elif message.photo:
        text = "<photo>"
        display_text = text
    elif message.video:
        text = "<video>"
        display_text = text
    elif message.document:
        text = "<document>"
        display_text = text
    elif message.sticker:
        text = "<sticker>"
        display_text = text
    elif message.animation:
        text = "<animation>"
        display_text = text
    elif message.audio:
        text = "<audio>"
        display_text = text
    elif message.voice:
        text = "<voice>"
        display_text = text
    else:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(display_text) > MAX_MESSAGE_LENGTH:
        await message.reply(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –°–ø–∞–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
    if is_spam(user_id, display_text):
        await message.reply(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç.")
        return
    if not can_send(user_id):
        await message.reply(f"‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –º–µ–¥–∏–∞
    media_checks = [
        (message.document, "–§–∞–π–ª"),
        (message.video, "–í–∏–¥–µ–æ"),
        (message.audio, "–ê—É–¥–∏–æ"),
        (message.voice, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        (message.animation, "GIF"),
    ]
    for media, name in media_checks:
        if media and media.file_size > MAX_MEDIA_SIZE_MB * 1024 * 1024:
            await message.reply(f"‚ö†Ô∏è {name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë.")
            return
    if message.photo and message.photo[-1].file_size > MAX_MEDIA_SIZE_MB * 1024 * 1024:
        await message.reply(f"‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_MEDIA_SIZE_MB} –ú–ë.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    user_last_message[user_id] = (display_text, datetime.now(), datetime.now())

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"[TelegramID: {user_id} | ChatID: {anon_id}] -> {display_text}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    caption = f"<code>[{anon_id}]</code>\n{display_text}"

    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    for uid in list(user_data.keys()):
        if uid == user_id or uid in banned_users:
            continue
        try:
            if message.text:
                await bot.send_message(chat_id=uid, text=caption)
            elif message.photo:
                await bot.send_photo(chat_id=uid, photo=message.photo[-1].file_id, caption=caption)
            elif message.video:
                await bot.send_video(chat_id=uid, video=message.video.file_id, caption=caption)
            elif message.document:
                await bot.send_document(chat_id=uid, document=message.document.file_id, caption=caption)
            elif message.sticker:
                await bot.send_sticker(chat_id=uid, sticker=message.sticker.file_id)
            elif message.animation:
                await bot.send_animation(chat_id=uid, animation=message.animation.file_id, caption=caption)
            elif message.voice:
                await bot.send_voice(chat_id=uid, voice=message.voice.file_id, caption=caption)
            elif message.audio:
                await bot.send_audio(chat_id=uid, audio=message.audio.file_id, caption=caption)
        except TelegramForbiddenError:
            print(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {uid}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command(commands=["ban"]))
async def cmd_ban(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    target_id = message.reply_to_message.from_user.id
    ban_user(target_id)
    await message.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.message(Command(commands=["unban"]))
async def cmd_unban(message: Message):
    if message.from_user.id not in ADMINS:
        return
    if not message.reply_to_message:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    target_id = message.reply_to_message.from_user.id
    unban_user(target_id)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

# --------- Run ----------
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
